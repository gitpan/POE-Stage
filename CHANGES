============================
2007-04-04 23:01:01 v0_02_00
============================

  2007-04-04 23:00:30 (r158) by rcaputo; lib/POE/Stage.pm M

    New version for release, although there still are warnings. Thus the
    "developer" revision. 

  2007-02-28 07:30:36 (r157) by rcaputo; lib/POE/Callback.pm M

    Aesthetic patch to a leak message.

  2007-02-28 07:30:08 (r156) by rcaputo; lib/POE/Request.pm M

    If a request is being destroyed, don't bother cleaning up its
    contexts in its source and destination stages if those stages don't
    exist. 

  2007-02-15 05:09:17 (r155) by rcaputo
  lib/POE/Watcher/Delay.pm M; lib/POE/Watcher/Input.pm M;
  lib/POE/Watcher.pm M; lib/POE/Watcher/Wheel.pm M;
  examples/tcp-server.perl M; lib/POE/Request.pm M

    Support on_foo => sub {} (aka anonymous, truly closured callbacks)
    for requests and watchers. Unfortunately it fundamentally changes the
    API for these classes, and in a way I'm not entirely sure I want to
    persue long-term. That is, subclass constructors are done via init().
    The new() method does some on_foo=>coderef rewriting before passing
    the constructor request to init(). 

  2007-02-11 20:35:14 (r154) by rcaputo
  lib/POE/Callback.pm A; MANIFEST M; lib/POE/Stage.pm M

    Abstract the :Handler magic to POE::Callback. 

  2007-01-31 17:38:44 (r153) by rcaputo; NAMING A

    Initial add. I needed to resolve issues surrounding the attribute
    handlers and anonymous callbacks. 

  2007-01-28 08:14:01 (r152) by rcaputo; lib/POE/Stage.pm M

    Support roles for new stages. The role is passed to the implicit
    request that calls on_init. Role magic happens when the substage
    returns or emits a message. 

  2007-01-28 08:12:50 (r151) by rcaputo; lib/POE/Request.pm M

    Support on_ methods in more places. It's still not the central,
    common, standard method lookup I'm looking for, but it's closer. 

  2007-01-25 17:22:41 (r150) by rcaputo; lab/generic.perl M

    Add a note about scatter/gather idioms. 

  2007-01-25 07:00:17 (r149) by rcaputo; lab/generic.perl M

    Add keywords.

  2007-01-25 06:59:23 (r148) by rcaputo
  lab/handler-names.perl M; lab/stringified-objects.perl M;
  lab/declare.perl M; lib/POE/Watcher/Input.pm M; lab/genlex.perl M;
  lab/local-scoped-state.perl M; lab/sweet-at-under.perl M;
  lib/POE/Stage/TiedAttributes.pm M; lab/lvalue-test.perl M;
  lab/sweet-state.perl M; lab/tied-attributes-test.perl M;
  lib/POE/Stage.pm M; lab/generic.perl A; lib/POE/Request.pm M

    New prototype, generic.perl, which implements the beginnings of a
    POE::Stage::Generic. Demonstrates forking. Pushes the envelope a
    little, showing on_init() and setting up static resources there.
    
    Pushed the envelope a little too hard. Changes were needed in the
    base classes.
    
    Set @INC in many of the lab programs so I can run them directly. 

  2007-01-21 07:57:35 (r147) by rcaputo
  examples/self-requesting-stage.perl M; examples/log-resolver.perl M;
  lib/POE/Stage.pm M; lib/POE/Stage/Resolver.pm M; lib/POE/Request.pm M

    It's vital that on_init() handlers can create $self-scoped resources
    for the stage. on_init() must be called within the new stage's
    context for this to work. This is a big departure from previous
    behavior, which called on_init() from the creator's context.
    Unfortunately self-requesting stages required on_init() to be called
    from the creator's context, so they no longer work. 

  2007-01-07 06:51:22 (r146) by rcaputo
  examples/ping-pong.perl M; examples/self-requesting-stage.perl M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; examples/01_basics.perl M;
  examples/attributes.perl M; examples/wheel-run.perl M;
  lib/POE/Stage/App.pm M; lib/POE/Stage.pm M;
  examples/poe-stage-synopsis.perl M; examples/tcp-server.perl M

    App->run() was a little too high-level for my tastes tonight. I
    prefer having to instantiate and run as two separate steps. Luckily
    it can be consolidated to App->new()->run() for fans of brevity. 

  2006-12-25 19:09:56 (r145) by rcaputo
  lib/POE/Request/Upward.pm M; lib/POE/Stage/App.pm M; lib/POE/Stage.pm
  M; lib/POE/Stage/Resolver.pm M; lib/POE/Request/Emit.pm M;
  lib/POE/Request/Return.pm M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Request.pm M; lib/POE/Stage/Echoer.pm M

    More documentation revisions. 

  2006-12-24 09:47:44 (r144) by rcaputo; lib/POE/Stage.pm M

    Major documentation revision. 

  2006-12-18 07:28:32 (r143) by rcaputo
  examples/ping-pong.perl M; examples/self-requesting-stage.perl M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; examples/01_basics.perl M;
  examples/attributes.perl M; examples/wheel-run.perl M; lib/POE/Stage.pm
  M; lib/POE/Stage/Resolver.pm M; lib/POE/Stage/Ticker.pm M;
  examples/tcp-server.perl M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Stage/Echoer.pm M

    Use POE::Stage::App. 

  2006-12-17 23:29:08 (r142) by rcaputo
  lib/POE/Stage/App.pm A; lib/POE/Stage.pm M;
  examples/poe-stage-synopsis.perl A

    Add POE::Stage::App. 

  2006-11-27 17:29:46 (r141) by rcaputo; lib/POE/Stage.pm M

    Make a token gesture towards documenting the implicit handler magic
    for "on_" methods. 

  2006-11-27 16:43:36 (r140) by rcaputo
  lab/handler-names.perl M; lib/POE/Stage.pm M; lib/POE/Request.pm M

    Automatically treat methods beginning with "on_" as handlers, so no
    explicit :Handler magic is needed for them. 

  2006-11-27 06:57:53 (r139) by rcaputo
  lab/handler-names.perl M; lib/POE/Request.pm M

    Make on_${role}_${type} handlers work. Temporarily compromise my
    vision for handler-names.perl so it runs. 

  2006-11-27 06:16:03 (r138) by rcaputo; lab/handler-names.perl M

    Document the plan to make method names more significant. 

  2006-11-20 18:32:51 (r137) by rcaputo; lab/handler-names.perl A

    A use case for special handler names. 

  2006-11-18 23:49:30 (r136) by rcaputo
  lib/POE/Request/Upward.pm M; lib/POE/Request/Recall.pm M;
  lib/POE/Watcher/Delay.pm M; lib/POE/Watcher/Input.pm M;
  lib/POE/Watcher.pm M; lib/POE/Stage/TiedAttributes.pm M;
  lib/POE/Watcher/Wheel.pm M; lib/POE/Stage.pm M;
  lib/POE/Stage/Resolver.pm M; lib/POE/Watcher/Wheel/Run.pm M;
  lib/POE/Stage/Receiver.pm M; lib/POE/Request/Return.pm M;
  lib/POE/Stage/Echoer.pm M; lib/POE/Watcher/Wheel/SocketFactory.pm M;
  lib/POE/Stage/Ticker.pm M; lib/POE/Request/Emit.pm M;
  lib/POE/Watcher/Wheel/ReadWrite.pm M; lib/POE/Request.pm M

    Make the documentation more factual. This doesn't necessarily improve
    its readability, however. 

  2006-11-18 23:48:36 (r135) by rcaputo; Makefile.PL M

    Wrap the prerequisite class names in quotes. 

  2006-11-14 08:33:31 (r134) by rcaputo
  lab/Persistence.pm D; lab/persistence.perl D

    Moved to the lex-per repository. Released as Lexical::Persistence. 

  2006-11-13 08:25:49 (r133) by rcaputo
  lab/Persistence.pm M; lab/persistence.perl M

    Allow wrap() to work on method invocations. 

  2006-11-13 05:22:58 (r132) by rcaputo
  lab/Persistence.pm M; lab/persistence.perl M

    Push and pop argument contexts rather than just write to them. This
    supports nested calls, which otherwise would overwrite the parameters
    passed to their callers. It also removes the need for weaken(). 

  2006-11-13 05:07:20 (r131) by rcaputo
  lab/Persistence.pm M; lab/persistence.perl M

    Change the way argument contexts are generated, allowing for POE's
    internal parameters to be stuffed into the catch-all context. 

  2006-11-13 04:48:13 (r130) by rcaputo; lab/Persistence.pm M

    Document with intent to release. I hope that's not a crime. 

  2006-11-13 04:13:43 (r129) by rcaputo; lab/persistence.perl M

    Simplify generate_arg_hash(). Don't need to do the DB package and
    caller() trick. 

  2006-11-13 04:06:22 (r128) by rcaputo; lab/persistence.perl M

    Comment it up as an intro/tutorial. 

  2006-11-13 03:57:10 (r127) by rcaputo
  lab/Persistence.pm A; lab/declare.perl M; lab/genlex.perl M;
  lab/persistence.perl A; lab/Declare.pm M

    OO-ify the generic lexical persistence thing. Also add some keywords
    tags here and there. 

  2006-11-12 17:59:11 (r126) by rcaputo; lab/genlex.perl M

    Tidy up a bit. Mostly changes to comments. 

  2006-11-12 08:44:38 (r125) by rcaputo; lab/genlex.perl M

    Whitespace fix.

  2006-11-12 08:42:51 (r124) by rcaputo; lab/genlex.perl M

    Make a handy POE-specific wrapper. 

  2006-11-12 08:40:02 (r123) by rcaputo; lab/genlex.perl M

    Simplify heap creation. 

  2006-11-12 08:29:41 (r122) by rcaputo; lab/genlex.perl A

    Fun with generic lexical aliasing. 

  2006-11-11 18:04:32 (r121) by rcaputo; lib/POE/Stage.pm M

    Grab the handler's sub name directly rather than looping through the
    package. 

  2006-11-11 17:12:31 (r120) by rcaputo; lib/POE/Stage.pm M

    Remove some dies that were only in for testing. 

  2006-11-11 17:11:47 (r119) by rcaputo; lib/POE/Stage.pm M

    Remove the old attribute handlers. Clean up :Handler and expose()
    somewhat. 

  2006-11-11 09:51:03 (r118) by rcaputo
  examples/ping-pong.perl M; examples/self-requesting-stage.perl M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; examples/01_basics.perl M;
  examples/attributes.perl M; examples/wheel-run.perl M; lib/POE/Stage.pm
  M; lib/POE/Stage/Resolver.pm M; lib/POE/Stage/Ticker.pm M;
  examples/tcp-server.perl M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Stage/Echoer.pm M; t/01_all_call_types.t M

    Switch to sub foo :Handler {...} syntax, pad walking, and lexical
    aliasing from an absolutely humongous handler wrapper function. 

  2006-11-06 19:24:27 (r117) by rcaputo; Makefile.PL M

    Set a LICENSE. Cheap kwalitee points!

  2006-11-03 08:35:43 (r116) by rcaputo; lab/declare.perl M

    Extend expose() to encompass explicit versions of all the implicit,
    prefixed syntax. 

  2006-11-03 08:25:43 (r115) by rcaputo; lab/declare.perl M

    Settle on some syntax. 

  2006-10-30 07:35:31 (r114) by rcaputo; lab/declare.perl M

    Document my goals better, and put them right up front where they
    can't be missed. 

  2006-10-30 07:06:20 (r113) by rcaputo
  lab/declare.perl M; lab/Declare.pm M

    Commit the sum of today's tinkering. There's a slightly flawed
    technique in here for fixing lexicals before calling a finction. 

  2006-10-29 09:09:47 (r112) by rcaputo; lab/declare.perl M

    Make note of request object methods for declaring request data
    members. 

  2006-10-29 08:11:22 (r111) by rcaputo
  lab/declare.perl M; lab/Declare.pm M

    Punt. A single declarator cannot handle scalar initialization and
    nonscalar declaration simultaneously. Write two instead: init() to
    handle scalar initialization, and declare() that permits declaration
    of multiple variable types. Later if it's determined Perl can handle
    both with one function, we can combine the implementations and make
    one an alias for the other. 

  2006-10-28 17:07:59 (r110) by rcaputo
  lab/declare.perl M; lab/Declare.pm M

    Matt Trout suggested \[$@%] prototypes for the multi-type declare().
    Added a declare_u() to test his idea. It works! 

  2006-10-28 16:42:08 (r109) by rcaputo
  lab/declare.perl M; lab/Declare.pm M

    Add Philip Gwyn's suggested declare_a() with notes about its caveats. 

  2006-10-28 06:15:56 (r108) by rcaputo
  lab/declare.perl A; lab/Declare.pm A

    Experiment with a declare() syntax as an alternative for :Arg, :Req,
    and other declarative variable attributes. 

============================
2006-09-23 18:14:57 v0_01_00
============================

  2006-09-23 18:13:50 (r106) by rcaputo; lib/POE/Stage.pm M

    Switch to manually selected version numbers. And make it 0.01_00. 

  2006-09-23 18:12:07 (r105) by rcaputo
  lib/POE/Request/Upward.pm M; lib/POE/Request/Recall.pm M;
  lib/POE/Watcher/Delay.pm M; lib/POE/Watcher/Input.pm M;
  lib/POE/Watcher.pm M; lib/POE/Stage/TiedAttributes.pm M;
  lib/POE/Watcher/Wheel.pm M; lib/POE/Stage.pm M;
  lib/POE/Stage/Resolver.pm M; lib/POE/Watcher/Wheel/Run.pm M;
  lib/POE/Stage/Receiver.pm M; lib/POE/Request/Return.pm M;
  lib/POE/Stage/Echoer.pm M; lib/POE/Watcher/Wheel/SocketFactory.pm M;
  lib/POE/Stage/Ticker.pm M; lib/POE/Request/Emit.pm M;
  lib/POE/Watcher/Wheel/ReadWrite.pm M; lib/POE/Request.pm M

    Add a note about the distribution's not-ready-for-primetime-ness to
    the BUGS section of each module. 

  2006-09-05 23:41:37 (r104) by hdp
  lib/POE/Watcher/Wheel/SocketFactory.pm A

    [push @ 4225f28a9441002fb4fa39af374b4518a1798017] SocketFactory
    watcher
    
    Original author: Hans Dieter Pearcey <hdp@vex.pobox.com> Date:
    2006-09-06 03:41:48

  2006-09-05 15:14:37 (r103) by hdp
  lib/POE/Watcher/Wheel.pm M; lib/POE/Watcher/Wheel/Run.pm M

    [push @ f0af741f1192328143b6bdd8aaf787179ab0fb31] refactoring wheel_*
    from Run to the base class, using Class::Data::Inheritable
    
    Original author: Hans Dieter Pearcey <hdp@vex.pobox.com> Date:
    2006-09-05 18:50:56

  2006-09-05 15:14:32 (r102) by hdp; lib/POE/Watcher/Wheel/ReadWrite.pm A

    [push @ 705e36aac0c42042fa8b66a7e796997b439d1d7a] working ReadWrite
    watcher
    
    Original author: Hans Dieter Pearcey <hdp@vex.pobox.com> Date:
    2006-09-05 18:48:42

  2006-09-05 01:54:13 (r101) by rcaputo; PATTERNS M

    Clarify some notes after a discussion with Dieter. 

  2006-08-14 03:13:27 (r100) by rcaputo; examples/attributes.perl A

    Totally comment up this example as a tutorial explaining WTF?! is
    going on with attributes and scopes and stuff. 

  2006-08-14 02:21:22 (r99) by rcaputo
  examples/self-requesting-stage.perl M; lib/POE/Request/Upward.pm M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; lib/POE/Stage/TiedAttributes.pm M;
  lib/POE/Stage.pm M; lib/POE/Stage/Resolver.pm M;
  examples/tcp-server.perl M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Stage/Echoer.pm M; examples/ping-pong.perl M;
  examples/01_basics.perl M; examples/wheel-run.perl M;
  lib/POE/Stage/Ticker.pm M; t/01_all_call_types.t M; lib/POE/Request.pm
  M

    Replace POE::Stage's Exporter import() with a custom one. The custom
    one honors :base, which mucks with the caller's @ISA to add
    POE::Stage as a base class for the user's.
    
    Also removed POE::Stage::TiedAttributes' exporter magic for REQUEST
    and RESPONSE. Everybody gets to use methods rather than reaching into
    the implementation from outside. Much better this way, even if it's a
    little slower. 

  2006-08-14 00:58:23 (r98) by rcaputo
  lib/POE/Stage/TiedAttributes.pm M; lib/POE/Stage.pm M

    Remove the last vestiges of direct $self->{member} access. The new
    attribute and sub syntax works fine here. 

  2006-08-14 00:38:16 (r97) by rcaputo
  examples/self-requesting-stage.perl M; lib/POE/Request/Recall.pm M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; lib/POE/Stage/TiedAttributes.pm M;
  lib/POE/Stage.pm M; lib/POE/Stage/Resolver.pm M;
  examples/tcp-server.perl M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Stage/Echoer.pm M; examples/ping-pong.perl M;
  examples/01_basics.perl M; lib/POE/Stage/Ticker.pm M;
  t/01_all_call_types.t M; lib/POE/Request.pm M

    Make self(), req() and rsp() for calling methods. Modify the
    attributes so that :Self is self's data members, and :Req and :Rsp
    are request and response data members, respectively. :Arg remains
    argumentative. 

  2006-08-13 21:23:44 (r96) by rcaputo
  MANIFEST M; lib/POE/Stage.pm M; lib/POE/Attribute D

    Replace the tied POE::Attribute classes with Devel::LexAlias. 

  2006-08-13 20:37:54 (r95) by rcaputo
  lib/POE/Member D; MANIFEST M; Makefile.PL M; lib/POE/Stage.pm M

    Replace the POE::Member tied redirects with Devel::LexAlias. A big
    shout out to Matt S. Trout for pointing me at a wheel I was
    reinventing poorly: Catalyst::Controller::BindLex. 

  2006-08-12 07:25:53 (r94) by rcaputo
  examples/ping-pong.perl M; examples/self-requesting-stage.perl M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; examples/01_basics.perl M;
  examples/wheel-run.perl M; examples/tcp-server.perl M

    Upgrade the examples for the new :Self, :Arg, and :Memb attributes.
    Some issues arose from this: Argument filtering and hoisting need
    access to $args directly (for deleting). The "request" and "response"
    members aren't necessary---they may be attributes---but for now we
    still must access them via $self->{req} because they don't have
    sigils like the :Memb system uses internally. 

  2006-08-12 07:23:58 (r93) by rcaputo; lib/POE/Stage.pm M

    Add handlers for :Arg, :Memb, and :Self. 

  2006-08-12 07:23:07 (r92) by rcaputo
  lib/POE/Member/Hash.pm A; lib/POE/Member A; lib/POE/Member/Scalar.pm A;
  MANIFEST M; lib/POE/Member/Array.pm A

    Add classes for tied Stage members. 

  2006-08-12 07:20:50 (r91) by rcaputo
  lab/SweetAtUnder.pm M; lab/sweet-at-under.perl M

    Add proofs of concept for attributes to tie members. 

  2006-08-12 06:38:51 (r90) by rcaputo
  lib/POE/Attribute/Request/Array.pm M

    Fix a reference error in PUSH. 

  2006-08-09 15:51:45 (r89) by rcaputo; lab/sweet-at-under.perl M

    Add some sample output. 

  2006-08-09 15:31:32 (r88) by rcaputo
  lab/SweetAtUnder.pm A; lab/sweet-at-under.perl A

    Add an experiment to replace @_ use with scalar attributes. 

  2006-07-08 23:18:54 (r87) by rcaputo; examples/01_basics.perl M

    Append sample output to the basics example. 

===========================
2006-07-08 23:00:45 v0_0082
===========================

  2006-07-08 22:53:34 (r85) by rcaputo; MANIFEST M

    Add more examples to the MANIFEST. 

  2006-07-08 22:51:57 (r84) by rcaputo; examples/01_basics.perl M

    Add keywords expansion. 

  2006-07-08 22:51:28 (r83) by rcaputo; Makefile.PL M

    Add new dependencies. 

  2006-07-08 22:47:24 (r82) by rcaputo
  lib/POE/Stage.pm M; lib/POE/Request.pm M; t/01_all_call_types.t M

    Remove the need for overload.pm magic. 

  2006-07-08 22:11:46 (r81) by rcaputo
  lib/POE/Request/Upward.pm M; lib/POE/Request/Recall.pm M;
  lib/POE/Watcher/Delay.pm M; lib/POE/Watcher/Input.pm M;
  lib/POE/Watcher.pm M; lib/POE/Stage/TiedAttributes.pm M;
  lib/POE/Attribute/Request/Scalar.pm M; lib/POE/Watcher/Wheel.pm M;
  lib/POE/Stage.pm M; lib/POE/Stage/Resolver.pm M;
  lib/POE/Stage/Receiver.pm M; lib/POE/Request/Return.pm M;
  lib/POE/Stage/Echoer.pm M; lib/POE/Attribute/Request/Array.pm M;
  lib/POE/Attribute/Request/Hash.pm M; lib/POE/Stage/Ticker.pm M;
  lib/POE/Request/Emit.pm M; lib/POE/Request.pm M

    Major documentation revision. Reword things so they're more true in
    light of the recent syntax changes. Remove deprecated syntax. Clean
    up whatever looked iffy at the time. 

  2006-07-08 16:18:06 (r80) by rcaputo
  lib/POE/Request/TiedAttributes.pm D

    Not needed anymore! Yay! 

  2006-07-08 16:09:07 (r79) by rcaputo
  examples/ping-pong.perl M; examples/self-requesting-stage.perl M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; lib/POE/Stage/TiedAttributes.pm M;
  examples/wheel-run.perl M; lib/POE/Stage/Resolver.pm M;
  lib/POE/Stage/Ticker.pm M; examples/tcp-server.perl M;
  lib/POE/Stage/Receiver.pm M

    Fix the sample stages ande example programs to use the attribute
    syntax rather than storing to requests directly. 

  2006-07-08 12:52:19 (r78) by rcaputo
  lib/POE/Request/Recall.pm M; lib/POE/Request/Upward.pm M; MANIFEST M;
  lib/POE/Request/TiedAttributes.pm M; lib/POE/Request/Emit.pm M;
  lib/POE/Request/Return.pm M; lib/POE/Request.pm M;
  t/01_all_call_types.t M

    Removed $self->{req}{foo} and $self->{rsp}{foo} support. Replaced
    their use with my $foo :Req and my $foo :Rsp support, at least in the
    test program. Still need to go through the examples. 

  2006-07-08 07:15:18 (r77) by rcaputo
  lib/POE/Request/Recall.pm M; lib/POE/Request/Upward.pm M;
  lib/POE/Watcher/Delay.pm M; lib/POE/Watcher/Input.pm M;
  examples/01_basics.perl M; lib/POE/Watcher/Wheel.pm M; lib/POE/Stage.pm
  M; lib/POE/Request.pm M

    Add ":Req($request_object)" attribute syntax. Lexicals declared with
    this attribute will be available as ":Rsp" for responses to the
    particular request. 

  2006-07-08 07:13:57 (r76) by rcaputo
  lab/SweetState.pm M; lab/sweet-state.perl M

    Test raw attribute data combined with PadWalker. Works great! 

  2006-07-05 08:09:57 (r75) by rcaputo; examples/01_basics.perl M

    Document an idea about using :Req or :Rsp to associate the front-end
    data with the back end data on the request. 

  2006-07-05 07:45:17 (r74) by rcaputo
  examples/01_basics.perl M; lib/POE/Stage.pm M

    Add initial :Rsp syntax, and extend examples/01_basic.perl to explore
    it. 

  2006-07-05 07:26:01 (r73) by rcaputo
  lib/POE/Attribute/Request/Array.pm M; lab/SweetState.pm M;
  lib/POE/Attribute/Request/Hash.pm M; examples/01_basics.perl A;
  lab/sweet-state.perl M; lib/POE/Attribute/Request/Scalar.pm M;
  lib/POE/Stage.pm M; lib/POE/Request.pm M

    Create the :Req attribute. Variables declared :Req become part of a
    request-scoped continuation. 

  2006-07-05 07:23:44 (r72) by rcaputo
  lib/POE/Attribute/Request/Array.pm A; lib/POE/Attribute/Request/Hash.pm
  A; lib/POE/Attribute/Request A; lib/POE/Attribute/Request/Scalar.pm A;
  lib/POE/Attribute A

    Add the hidden tie magic behind the :Req attribute. 

  2006-07-05 01:19:42 (r71) by rcaputo
  lab/SweetState.pm A; lab/sweet-state.perl M

    Move the sweet state management code into its own base class. This
    works, so we can move the attribute interface code into POE::Stage
    next. Once that's done, I think it needs to hook into the existing
    request/response state management code. After that, the magic that
    manages state through $self->{req} and $self->{rsp} can go away.
    Finally, I think $self->{req} and $self->{rsp} might be better off as
    accessors. 

  2006-07-04 08:51:42 (r70) by rcaputo; lab/sweet-state.perl A

    A prototype for a promising melange of lexical variable attributes,
    PadWalker, and tie(), giving us "my $foo :Req;" as a replacement for
    $self->{req}{foo}. 

  2006-07-04 03:37:08 (r69) by rcaputo; t/01_all_call_types.t M

    Grrr. Vim should treat this as Perl code. 

  2006-04-10 18:38:29 (r68) by mathieu
  lib/POE/Request/Return.pm M; lib/POE/Request.pm M;
  t/01_all_call_types.t M

    Default request return type to "return", and default emit type to
    "emit".

  2006-02-06 08:53:33 (r67) by rcaputo; examples/tcp-server.perl M

    Note a recurring theme. 

  2006-02-06 08:50:11 (r66) by rcaputo; examples/tcp-server.perl M

    Remove some commented out code. 

  2006-02-06 08:48:37 (r65) by rcaputo; lib/POE/Request.pm M

    Add initial support of on_my_messagetype() methods. This is a raw,
    unpolished feature and is subject to change. 

  2006-02-06 08:48:01 (r64) by rcaputo; examples/tcp-server.perl A

    Add an example of the on_my_messagetype() feature. Stages can handle
    their own messages by adding on_my_messagetype() methods. These
    methods are called whenever emit() or return() would send a message
    of the appropriate type. Subclasses of a stage can handle messages
    themselves. In this way self-contained stages can be written. 

  2006-01-30 04:54:18 (r63) by rcaputo; examples/udp-peer.perl M

    Needed POE::Stage loaded. base.pm doesn't do it for us. 

  2005-10-12 21:04:48 (r62) by rcaputo; lib/POE/Stage.pm M

    Wrap the wheel watcher callbacks in block eval so they don't
    necessarily kill off the entire program. 

  2005-10-10 05:33:05 (r61) by rcaputo
  .releaserc M; examples/wheel-run.perl M; lib/POE/Watcher/Wheel.pm M;
  lib/POE/Watcher/Wheel/Run.pm M

    Enabele $Id$ on the touched files. 

  2005-10-10 05:32:00 (r60) by rcaputo
  examples/wheel-run.perl A; lib/POE/Watcher/Wheel.pm A; lib/POE/Stage.pm
  M; lib/POE/Watcher/Wheel/Run.pm A; lib/POE/Watcher/Wheel A

    Add initial POE::Watcher::Wheel support, along with
    POE::Watcher::Wheel::Run as a proof of concept and a test case. Need
    to document this better. 

  2005-10-03 01:03:40 (r59) by rcaputo
  README D; Makefile.PL M; lib/POE/Stage.pm M

    Automatically generate the README from POE::Stage's perldoc. 

  2005-10-03 01:01:55 (r58) by rcaputo; .releaserc A

    So we can just "release" to fling a new version into the big, blue
    world. 

==============
End of Excerpt
==============
