=================================
2008-01-02T20:53:57.405910Z v0_03
=================================

  2008-01-02 20:53:37 (r168) by rcaputo; lib/POE/Stage.pm M

    sproingle and mst (irc.perl.org #moose) made the point that the
    developer version number makes this harder for average people to find
    and play with, which may be hindering the project's adoption. This
    revision removes the underscore and documents the project's
    not-ready-for-prime-time nature. 

  2007-10-15 02:26:31 (r167) by rcaputo; lib/POE/Callback.pm M

    Skip the callback leak warning if the leaked callback is stored in
    the symbol table. Symbol tables are destroyed after END, so it'll
    assume callbacks in the symbol table aren't leaks. 

  2007-10-15 02:00:23 (r166) by rcaputo
  MANIFEST M; examples/wide-finder.perl A

    On Chris Prather's prompting, implement a version of his wide-finder
    example. 

  2007-10-15 01:21:39 (r165) by rcaputo; examples/candygram.perl M

    Oops. Remove Chris Prather's original code. 

  2007-10-15 01:20:35 (r164) by rcaputo
  examples/candygram.perl A; MANIFEST M

    Add candygram.perl example. 

  2007-10-15 01:02:54 (r163) by rcaputo
  lib/POE/Callback.pm M; MANIFEST M

    Forgot to alias $self, $req and $rsp. Also forgot to add Philip
    Gwyn's tests to the MANIFEST. 

  2007-10-14 22:06:18 (r162) by rcaputo
  lib/POE/Callback.pm M; t/10_callback.t A

    Applied Philip Gwyn's patch (plus some tightening up) to generate
    optimal lexical magic for POE::Callback objects. Resolves rt.cpan.org
    #29975. 

  2007-07-11 08:02:55 (r161) by rcaputo; NOTES.CPS M

    Second revision.

  2007-07-10 09:20:41 (r160) by rcaputo; NOTES.CPS A

    Initial add of a rough outline for an article or talk explaining
    POE::Stage as a continuation-passing system. 

====================================
2007-04-04T23:01:01.614542Z v0_02_00
====================================

  2007-04-04 23:00:30 (r158) by rcaputo; lib/POE/Stage.pm M

    New version for release, although there still are warnings. Thus the
    "developer" revision. 

  2007-02-28 07:30:36 (r157) by rcaputo; lib/POE/Callback.pm M

    Aesthetic patch to a leak message.

  2007-02-28 07:30:08 (r156) by rcaputo; lib/POE/Request.pm M

    If a request is being destroyed, don't bother cleaning up its
    contexts in its source and destination stages if those stages don't
    exist. 

  2007-02-15 05:09:17 (r155) by rcaputo
  lib/POE/Watcher/Delay.pm M; lib/POE/Watcher/Input.pm M;
  lib/POE/Watcher.pm M; lib/POE/Watcher/Wheel.pm M;
  examples/tcp-server.perl M; lib/POE/Request.pm M

    Support on_foo => sub {} (aka anonymous, truly closured callbacks)
    for requests and watchers. Unfortunately it fundamentally changes the
    API for these classes, and in a way I'm not entirely sure I want to
    persue long-term. That is, subclass constructors are done via init().
    The new() method does some on_foo=>coderef rewriting before passing
    the constructor request to init(). 

  2007-02-11 20:35:14 (r154) by rcaputo
  lib/POE/Callback.pm A; MANIFEST M; lib/POE/Stage.pm M

    Abstract the :Handler magic to POE::Callback. 

  2007-01-31 17:38:44 (r153) by rcaputo; NAMING A

    Initial add. I needed to resolve issues surrounding the attribute
    handlers and anonymous callbacks. 

  2007-01-28 08:14:01 (r152) by rcaputo; lib/POE/Stage.pm M

    Support roles for new stages. The role is passed to the implicit
    request that calls on_init. Role magic happens when the substage
    returns or emits a message. 

  2007-01-28 08:12:50 (r151) by rcaputo; lib/POE/Request.pm M

    Support on_ methods in more places. It's still not the central,
    common, standard method lookup I'm looking for, but it's closer. 

  2007-01-25 17:22:41 (r150) by rcaputo; lab/generic.perl M

    Add a note about scatter/gather idioms. 

  2007-01-25 07:00:17 (r149) by rcaputo; lab/generic.perl M

    Add keywords.

  2007-01-25 06:59:23 (r148) by rcaputo
  lab/handler-names.perl M; lab/stringified-objects.perl M;
  lab/declare.perl M; lib/POE/Watcher/Input.pm M; lab/genlex.perl M;
  lab/local-scoped-state.perl M; lab/sweet-at-under.perl M;
  lib/POE/Stage/TiedAttributes.pm M; lab/lvalue-test.perl M;
  lab/sweet-state.perl M; lab/tied-attributes-test.perl M;
  lib/POE/Stage.pm M; lab/generic.perl A; lib/POE/Request.pm M

    New prototype, generic.perl, which implements the beginnings of a
    POE::Stage::Generic. Demonstrates forking. Pushes the envelope a
    little, showing on_init() and setting up static resources there.
    
    Pushed the envelope a little too hard. Changes were needed in the
    base classes.
    
    Set @INC in many of the lab programs so I can run them directly. 

  2007-01-21 07:57:35 (r147) by rcaputo
  examples/self-requesting-stage.perl M; examples/log-resolver.perl M;
  lib/POE/Stage.pm M; lib/POE/Stage/Resolver.pm M; lib/POE/Request.pm M

    It's vital that on_init() handlers can create $self-scoped resources
    for the stage. on_init() must be called within the new stage's
    context for this to work. This is a big departure from previous
    behavior, which called on_init() from the creator's context.
    Unfortunately self-requesting stages required on_init() to be called
    from the creator's context, so they no longer work. 

  2007-01-07 06:51:22 (r146) by rcaputo
  examples/ping-pong.perl M; examples/self-requesting-stage.perl M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; examples/01_basics.perl M;
  examples/attributes.perl M; examples/wheel-run.perl M;
  lib/POE/Stage/App.pm M; lib/POE/Stage.pm M;
  examples/poe-stage-synopsis.perl M; examples/tcp-server.perl M

    App->run() was a little too high-level for my tastes tonight. I
    prefer having to instantiate and run as two separate steps. Luckily
    it can be consolidated to App->new()->run() for fans of brevity. 

  2006-12-25 19:09:56 (r145) by rcaputo
  lib/POE/Request/Upward.pm M; lib/POE/Stage/App.pm M; lib/POE/Stage.pm
  M; lib/POE/Stage/Resolver.pm M; lib/POE/Request/Emit.pm M;
  lib/POE/Request/Return.pm M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Request.pm M; lib/POE/Stage/Echoer.pm M

    More documentation revisions. 

  2006-12-24 09:47:44 (r144) by rcaputo; lib/POE/Stage.pm M

    Major documentation revision. 

  2006-12-18 07:28:32 (r143) by rcaputo
  examples/ping-pong.perl M; examples/self-requesting-stage.perl M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; examples/01_basics.perl M;
  examples/attributes.perl M; examples/wheel-run.perl M; lib/POE/Stage.pm
  M; lib/POE/Stage/Resolver.pm M; lib/POE/Stage/Ticker.pm M;
  examples/tcp-server.perl M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Stage/Echoer.pm M

    Use POE::Stage::App. 

  2006-12-17 23:29:08 (r142) by rcaputo
  lib/POE/Stage/App.pm A; lib/POE/Stage.pm M;
  examples/poe-stage-synopsis.perl A

    Add POE::Stage::App. 

  2006-11-27 17:29:46 (r141) by rcaputo; lib/POE/Stage.pm M

    Make a token gesture towards documenting the implicit handler magic
    for "on_" methods. 

  2006-11-27 16:43:36 (r140) by rcaputo
  lab/handler-names.perl M; lib/POE/Stage.pm M; lib/POE/Request.pm M

    Automatically treat methods beginning with "on_" as handlers, so no
    explicit :Handler magic is needed for them. 

  2006-11-27 06:57:53 (r139) by rcaputo
  lab/handler-names.perl M; lib/POE/Request.pm M

    Make on_${role}_${type} handlers work. Temporarily compromise my
    vision for handler-names.perl so it runs. 

  2006-11-27 06:16:03 (r138) by rcaputo; lab/handler-names.perl M

    Document the plan to make method names more significant. 

  2006-11-20 18:32:51 (r137) by rcaputo; lab/handler-names.perl A

    A use case for special handler names. 

  2006-11-18 23:49:30 (r136) by rcaputo
  lib/POE/Request/Recall.pm M; lib/POE/Request/Upward.pm M;
  lib/POE/Watcher/Delay.pm M; lib/POE/Watcher/Input.pm M;
  lib/POE/Watcher.pm M; lib/POE/Stage/TiedAttributes.pm M;
  lib/POE/Watcher/Wheel.pm M; lib/POE/Stage.pm M;
  lib/POE/Stage/Resolver.pm M; lib/POE/Watcher/Wheel/Run.pm M;
  lib/POE/Request/Return.pm M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Stage/Echoer.pm M; lib/POE/Watcher/Wheel/SocketFactory.pm M;
  lib/POE/Stage/Ticker.pm M; lib/POE/Request/Emit.pm M;
  lib/POE/Watcher/Wheel/ReadWrite.pm M; lib/POE/Request.pm M

    Make the documentation more factual. This doesn't necessarily improve
    its readability, however. 

  2006-11-18 23:48:36 (r135) by rcaputo; Makefile.PL M

    Wrap the prerequisite class names in quotes. 

  2006-11-14 08:33:31 (r134) by rcaputo
  lab/Persistence.pm D; lab/persistence.perl D

    Moved to the lex-per repository. Released as Lexical::Persistence. 

  2006-11-13 08:25:49 (r133) by rcaputo
  lab/Persistence.pm M; lab/persistence.perl M

    Allow wrap() to work on method invocations. 

  2006-11-13 05:22:58 (r132) by rcaputo
  lab/Persistence.pm M; lab/persistence.perl M

    Push and pop argument contexts rather than just write to them. This
    supports nested calls, which otherwise would overwrite the parameters
    passed to their callers. It also removes the need for weaken(). 

  2006-11-13 05:07:20 (r131) by rcaputo
  lab/Persistence.pm M; lab/persistence.perl M

    Change the way argument contexts are generated, allowing for POE's
    internal parameters to be stuffed into the catch-all context. 

  2006-11-13 04:48:13 (r130) by rcaputo; lab/Persistence.pm M

    Document with intent to release. I hope that's not a crime. 

  2006-11-13 04:13:43 (r129) by rcaputo; lab/persistence.perl M

    Simplify generate_arg_hash(). Don't need to do the DB package and
    caller() trick. 

  2006-11-13 04:06:22 (r128) by rcaputo; lab/persistence.perl M

    Comment it up as an intro/tutorial. 

  2006-11-13 03:57:10 (r127) by rcaputo
  lab/Persistence.pm A; lab/declare.perl M; lab/genlex.perl M;
  lab/persistence.perl A; lab/Declare.pm M

    OO-ify the generic lexical persistence thing. Also add some keywords
    tags here and there. 

  2006-11-12 17:59:11 (r126) by rcaputo; lab/genlex.perl M

    Tidy up a bit. Mostly changes to comments. 

  2006-11-12 08:44:38 (r125) by rcaputo; lab/genlex.perl M

    Whitespace fix.

  2006-11-12 08:42:51 (r124) by rcaputo; lab/genlex.perl M

    Make a handy POE-specific wrapper. 

  2006-11-12 08:40:02 (r123) by rcaputo; lab/genlex.perl M

    Simplify heap creation. 

  2006-11-12 08:29:41 (r122) by rcaputo; lab/genlex.perl A

    Fun with generic lexical aliasing. 

  2006-11-11 18:04:32 (r121) by rcaputo; lib/POE/Stage.pm M

    Grab the handler's sub name directly rather than looping through the
    package. 

  2006-11-11 17:12:31 (r120) by rcaputo; lib/POE/Stage.pm M

    Remove some dies that were only in for testing. 

  2006-11-11 17:11:47 (r119) by rcaputo; lib/POE/Stage.pm M

    Remove the old attribute handlers. Clean up :Handler and expose()
    somewhat. 

  2006-11-11 09:51:03 (r118) by rcaputo
  examples/ping-pong.perl M; examples/self-requesting-stage.perl M;
  examples/log-resolver.perl M; examples/udp-peer.perl M;
  examples/many-responses.perl M; examples/01_basics.perl M;
  examples/attributes.perl M; examples/wheel-run.perl M; lib/POE/Stage.pm
  M; lib/POE/Stage/Resolver.pm M; lib/POE/Stage/Ticker.pm M;
  examples/tcp-server.perl M; lib/POE/Stage/Receiver.pm M;
  lib/POE/Stage/Echoer.pm M; t/01_all_call_types.t M

    Switch to sub foo :Handler {...} syntax, pad walking, and lexical
    aliasing from an absolutely humongous handler wrapper function. 

  2006-11-06 19:24:27 (r117) by rcaputo; Makefile.PL M

    Set a LICENSE. Cheap kwalitee points!

  2006-11-03 08:35:43 (r116) by rcaputo; lab/declare.perl M

    Extend expose() to encompass explicit versions of all the implicit,
    prefixed syntax. 

  2006-11-03 08:25:43 (r115) by rcaputo; lab/declare.perl M

    Settle on some syntax. 

  2006-10-30 07:35:31 (r114) by rcaputo; lab/declare.perl M

    Document my goals better, and put them right up front where they
    can't be missed. 

  2006-10-30 07:06:20 (r113) by rcaputo
  lab/declare.perl M; lab/Declare.pm M

    Commit the sum of today's tinkering. There's a slightly flawed
    technique in here for fixing lexicals before calling a finction. 

  2006-10-29 09:09:47 (r112) by rcaputo; lab/declare.perl M

    Make note of request object methods for declaring request data
    members. 

  2006-10-29 08:11:22 (r111) by rcaputo
  lab/declare.perl M; lab/Declare.pm M

    Punt. A single declarator cannot handle scalar initialization and
    nonscalar declaration simultaneously. Write two instead: init() to
    handle scalar initialization, and declare() that permits declaration
    of multiple variable types. Later if it's determined Perl can handle
    both with one function, we can combine the implementations and make
    one an alias for the other. 

  2006-10-28 17:07:59 (r110) by rcaputo
  lab/declare.perl M; lab/Declare.pm M

    Matt Trout suggested \[$@%] prototypes for the multi-type declare().
    Added a declare_u() to test his idea. It works! 

  2006-10-28 16:42:08 (r109) by rcaputo
  lab/declare.perl M; lab/Declare.pm M

    Add Philip Gwyn's suggested declare_a() with notes about its caveats. 

  2006-10-28 06:15:56 (r108) by rcaputo
  lab/declare.perl A; lab/Declare.pm A

    Experiment with a declare() syntax as an alternative for :Arg, :Req,
    and other declarative variable attributes. 

==============
End of Excerpt
==============
